generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgcrypto]
}

model Address {
  addressId  String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cityId     Int?           
  stateId    Int?
  latitude   Float?
  longitude  Float?
  customerId String?        @unique @db.Uuid
  employeeId String?        @unique @db.Uuid
  status     Status         @default(active)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  eventId    String?        @unique @db.Uuid
  city       City?          @relation(fields: [cityId], references: [cityId])
  customer   Customer?      @relation(fields: [customerId], references: [customerId])
  employee   Employee?      @relation(fields: [employeeId], references: [employeeId])
  event      Event?         @relation(fields: [eventId], references: [eventId])
  state      State?         @relation(fields: [stateId], references: [stateId])
  image      Imageaddress[]
  supplier   Supplier[]

  @@index([cityId])
  @@index([stateId])
  @@index([customerId])
  @@index([employeeId])
  @@index([eventId])
}

model Attendance {
  attendanceId String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employeeId   String    @db.Uuid
  eventId      String    @db.Uuid
  datetime     DateTime  @default(now())
  method       ScanMethod?  @default(phone)
  status       Status    @default(active)
  checkIn      DateTime  @default(now())
  checkOut     DateTime?
  note         String?   @db.Text
  createdAt    DateTime  @default(now())
  employee     Employee  @relation(fields: [employeeId], references: [employeeId])
  event        Event     @relation(fields: [eventId], references: [eventId])

  @@index([employeeId])
  @@index([eventId])
}

model Auth {
  authId       String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(50)
  password     String         @db.VarChar(255)
  roleId       String         @db.Uuid
  employeeId   String?        @unique @db.Uuid
  status       AccountStatus  @default(active)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  lastLoginAt  DateTime?
  cart         Cart[]
  token        Token[]
  logs         AuthLog[]
  notification Notification[]
  role         Role           @relation(fields: [roleId], references: [roleId])
  employee     Employee?      @relation(fields: [employeeId], references: [employeeId])

  @@index([email])
  @@index([status])
  @@index([createdAt])
}

model AuthLog {
  id           Int      @id @default(autoincrement())
  authId       String   @db.Uuid
  method       String   @db.VarChar(100)
  url          String   @db.VarChar(255)
  status       Int
  responseTime Float
  ip           String   @db.VarChar(100)
  userAgent    String?  @db.VarChar(100)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  auth         Auth     @relation(fields: [authId], references: [authId])

  @@index([authId])
}

model Cart {
  cartId    String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  authId    String?    @db.Uuid
  userId    String?    @db.Uuid
  productId String     @db.Uuid
  quantity  Int
  status    Status     @default(active)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  auth      Auth?      @relation(fields: [authId], references: [authId])
  product   Product    @relation(fields: [productId], references: [productId])
  user      User?      @relation(fields: [userId], references: [userId])
  note      Cartnote[]

  @@unique([authId, productId], name: "authId_productId")
  @@index([authId])
  @@index([userId])
  @@index([productId])
}

model Cartnote {
  cartnoteId String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cartId     String @db.Uuid
  note       String @db.Text
  status     Status @default(active)
  cart       Cart   @relation(fields: [cartId], references: [cartId])

  @@index([cartId])
}

model Category {
  categoryId   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  picture      String?   @db.VarChar(255)
  categoryName String    @db.VarChar(20)
  categoryCode String?   @db.VarChar(20)
  memo         String?   @db.Text
  status       Status    @default(active)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  products     Product[]
}

model City {
  cityId    Int       @id @default(autoincrement())
  stateId   Int
  name      String    @db.Text
  addresses Address[]
  state     State     @relation(fields: [stateId], references: [stateId])

  @@unique([name, stateId])
}

model Customer {
  customerId String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employeeId String?       @db.Uuid
  firstName  String        @db.VarChar(20)
  lastName   String        @db.VarChar(20)
  gender     Gender        @default(male)
  phone      String?       @db.VarChar(20)
  status     Status        @default(active)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  address    Address?
  employee   Employee?     @relation(fields: [employeeId], references: [employeeId])
  info       Customerinfo?
  sales      Sale[]
  user       User?

  @@index([employeeId])
}

model Customerinfo {
  customerId String    @unique @db.Uuid
  picture    String?   @db.VarChar(255)
  region     String?   @db.VarChar(50)
  email      String?   @unique
  note       String?   @db.Text
  govId      String?   @db.VarChar(20)
  govPicture String?   @db.VarChar(255)
  govExpire  DateTime?
  status     Status    @default(active)
  customer   Customer  @relation(fields: [customerId], references: [customerId])
}

model Department {
  departmentId   String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  departmentName String     @db.VarChar(50)
  departmentCode String?    @db.VarChar(20)
  memo           String?    @db.Text
  status         Status     @default(active)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  employees      Employee[]
  positions      Position[]
}

model Employee {
  employeeId     String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employeeCode   String?        @unique   @db.VarChar(20)
  firstName      String         @db.VarChar(20)
  lastName       String         @db.VarChar(20)
  gender         Gender         @default(male)
  dob            DateTime?
  phone          String?        @unique   @db.VarChar(20)
  positionId     String         @db.Uuid
  departmentId   String         @db.Uuid
  salary         Decimal        @db.Decimal(10, 2)
  hiredDate      DateTime?
  status         Status         @default(active)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  address        Address?
  attendances    Attendance[]
  auth           Auth?
  customer       Customer[]
  department     Department     @relation(fields: [departmentId], references: [departmentId])
  position       Position       @relation(fields: [positionId], references: [positionId])
  info           Employeeinfo?
  approvedLeaves LeaveRequest[] @relation("Approver")
  leaveRequests  LeaveRequest[] @relation("Requester")
  payment        Payment[]
  sales          Sale[]

  @@index([employeeCode])
  @@index([departmentId])
  @@index([positionId])
}

model Employeeinfo {
  employeeId String    @unique @db.Uuid
  picture    String?   @db.VarChar(255)
  region     String?   @db.VarChar(100)
  email      String?   @unique    @db.VarChar(100)
  note       String?   @db.Text
  status     Status    @default(active)
  govExpire  DateTime?
  govId      String?   @db.VarChar(20)
  govPicture String?   @db.VarChar(255)
  employee   Employee  @relation(fields: [employeeId], references: [employeeId])
}

model Event {
  eventId    String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  eventName  String       @db.VarChar(100)
  memo       String?      @db.Text
  startDate  DateTime
  endDate    DateTime
  status     Status       @default(active)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  address    Address?
  attendance Attendance[]
}

model Imageaddress {
  imageId   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  imageUrl  String   @db.VarChar(255)
  addressId String   @db.Uuid
  status    Status   @default(active)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  address   Address  @relation(fields: [addressId], references: [addressId])

  @@index([addressId])
}

model Khqr {
  khqrId    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  account   String   @unique @default("suon_phanun@aclb")   @db.VarChar(50)
  name      String   @unique @default("PHANUN SUON")        @db.VarChar(50)
  city      String   @default("Siem Reap")                  @db.VarChar(50)
  amount    Decimal? @default(0.00) @db.Decimal(12, 2)
  currency  String?  @default("usd")                        @db.VarChar(10)
  token     String   @unique @default("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7ImlkIjoiNDdjMGY2MzY4ZTFmNGFjYSJ9LCJpYXQiOjE3NDgxNDA0MzgsImV4cCI6MTc1NTkxNjQzOH0.CSNbF2clfRi2f8ROhyOGF8Nxyz5lqet0Nb1iWEvwaDU")
  status    Status   @default(active)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LeaveRequest {
  leaveId      String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employeeId   String      @db.Uuid
  leaveType    LeaveType
  startDate    DateTime
  endDate      DateTime
  reason       String?     @db.Text
  status       LeaveStatus @default(pending)
  approvedById String?     @db.Uuid
  approvedAt   DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  approvedBy   Employee?   @relation("Approver", fields: [approvedById], references: [employeeId])
  employee     Employee    @relation("Requester", fields: [employeeId], references: [employeeId])

  @@index([employeeId])
  @@index([status])
}

model Log {
  id           Int      @id @default(autoincrement())
  method       String   @db.VarChar(50)
  url          String   @db.VarChar(255)
  status       Int
  responseTime Float
  ip           String   @db.VarChar(100)
  userAgent    String?  @db.VarChar(255)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Notification {
  notificationId String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  authId         String?  @db.Uuid
  userId         String?  @db.Uuid
  title          String   @db.VarChar(100)
  content        String   @db.VarChar(100)
  status         Status   @default(active)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  auth           Auth?    @relation(fields: [authId], references: [authId])
  user           User?    @relation(fields: [userId], references: [userId])

  @@index([authId])
  @@index([userId])
}

model Payment {
  paymentId     String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employeeId    String   @db.Uuid
  saleId        String   @db.Uuid
  invoice       String?  @db.VarChar(255)
  hash          String   @db.VarChar(100)
  fromAccountId String   @db.VarChar(50)
  toAccountId   String   @db.VarChar(50)
  currency      String   @db.VarChar(10)
  amount        Decimal  @db.Decimal(12, 2)
  externalRef   String   @db.VarChar(50)
  status        Status   @default(active)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  employee      Employee @relation(fields: [employeeId], references: [employeeId])
  sale          Sale     @relation(fields: [saleId], references: [saleId])

  @@index([employeeId])
  @@index([saleId])
  @@index([fromAccountId])
  @@index([toAccountId])
}

model Position {
  positionId   String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  departmentId String     @db.Uuid
  positionName String?    @db.VarChar(50)
  positionCode String?    @db.VarChar(20)
  memo         String?    @db.Text
  status       Status     @default(active)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  employees    Employee[]
  department   Department @relation(fields: [departmentId], references: [departmentId])

  @@index([departmentId])
}

model Product {
  productId    String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productName  String       @db.VarChar(50)
  productCode  String?      @db.VarChar(20)
  categoryId   String       @db.Uuid
  picture      String?      @db.VarChar(255)
  unit         String?      @db.VarChar(10)
  capacity     String?      @db.VarChar(20)
  sellPrice    Decimal      @default(0.00) @db.Decimal(10, 2)
  costPrice    Decimal      @default(0.00) @db.Decimal(10, 2)
  discountRate Int          @default(0)
  status       Status       @default(active)
  desc         String?      @db.Text
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  cart         Cart[]
  category     Category     @relation(fields: [categoryId], references: [categoryId])
  saledetails  Saledetail[]
  stocks       Stock?
  entry        Stockentry[]

  @@index([categoryId])
}

model Stock {
  stockId   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productId String   @unique @db.Uuid
  memo      String?  @db.Text
  status    Status   @default(active)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quantity  Int      @default(0)
  product   Product  @relation(fields: [productId], references: [productId])

  @@index([productId])
  @@index([createdAt])
}

model Stockentry {
  entryId    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  quantity   Int       @default(0)
  memo       String?   @db.Text
  status     Status    @default(active)
  entryPrice Decimal   @default(0.00) @db.Decimal(12, 2)
  entryDate  DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  productId  String    @db.Uuid
  supplierId String    @db.Uuid
  invoice    String?   @db.VarChar(255)
  product    Product   @relation(fields: [productId], references: [productId])
  supplier   Supplier  @relation(fields: [supplierId], references: [supplierId])

  @@index([productId])
  @@index([supplierId])
}

model Role {
  roleId       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String   @unique   @db.VarChar(20)
  description  String?  @db.Text
  status       Status   @default(active)
  isSystemRole Boolean  @default(false)
  createdAt    DateTime @default(now())
  auths        Auth[]

  @@index([name])
}

model Sale {
  saleId      String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employeeId  String       @db.Uuid
  customerId  String       @db.Uuid
  saleDate    DateTime     @default(now())
  amount      Decimal      @db.Decimal(12, 2)
  status      Status       @default(active)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  memo        String?      @db.Text
  invoice     String?      @db.VarChar(255)
  payment     Payment[]
  customer    Customer     @relation(fields: [customerId], references: [customerId])
  employee    Employee     @relation(fields: [employeeId], references: [employeeId])
  saledetails Saledetail[]

  @@index([employeeId])
  @@index([customerId])
}

model Saledetail {
  saledetailId String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  saleId       String   @db.Uuid
  productId    String   @db.Uuid
  quantity     Int
  amount       Decimal  @db.Decimal(12, 2)
  status       Status   @default(active)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  memo         String?  @db.Text
  product      Product  @relation(fields: [productId], references: [productId])
  sale         Sale     @relation(fields: [saleId], references: [saleId])

  @@index([saleId])
  @@index([productId])
}

model State {
  stateId   Int       @id @default(autoincrement())
  name      String    @unique   @db.VarChar(50)
  addresses Address[]
  cities    City[]
}

model Supplier {
  supplierId   String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  supplierName String       @db.VarChar(50)
  companyName  String?      @db.VarChar(50)
  phone        String?      @db.VarChar(20)
  email        String?      @db.VarChar(50)
  addressId    String?      @db.Uuid
  memo         String?      
  status       Status       @default(active)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  address      Address?     @relation(fields: [addressId], references: [addressId])
  entry        Stockentry[]
}

model System {
  systemId    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  systemName  String   @unique @default("Nun System") @db.VarChar(50)
  systemType  String   @default("default") @db.VarChar(50)
  ownerName   String?  @db.VarChar(100)
  ownerEmail  String?  @db.VarChar(100)
  ownerPhone  String?  @db.VarChar(20)
  apiKey      String   @unique @db.VarChar(255)
  apiSecret   String   @unique @db.VarChar(255)
  apiUrl      String   @unique @db.VarChar(255)
  apiVersion  String   @default("v1") @db.VarChar(10)
  description String?
  status      Status   @default(active)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Token {
  tokenId    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  authId     String?  @db.Uuid
  userId     String?  @db.Uuid
  token      String   @unique
  deviceInfo String   @default("")    @db.VarChar(100)
  ipAddress  String   @default("")    @db.VarChar(100)
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  auth       Auth?    @relation(fields: [authId], references: [authId])
  user       User?    @relation(fields: [userId], references: [userId])

  @@index([token])
  @@index([expiresAt])
}

model User {
  userId       String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  password     String         @db.VarChar(255)
  customerId   String?        @unique @db.Uuid
  status       AccountStatus  @default(active)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  cart         Cart[]
  notification Notification[]
  token        Token[]
  customer     Customer?      @relation(fields: [customerId], references: [customerId])

  @@index([email])
}

enum AccountStatus {
  active
  inactive
  suspended
  pending
}

enum Gender {
  male
  female
  others
}

enum PaymentStatus {
  paid
  pending
  cancel
}

enum PaymentMethod {
  cash
  creditCard
  khqr
  leave
}

enum Status {
  active
  inactive
}

enum StockType {
  in
  out
}

enum SystemType {
  default
  pos
  reserve
}

enum LeaveType {
  annual
  sick
  maternity
  paternity
  unpaid
  other
}

enum LeaveStatus {
  pending
  approved
  rejected
  cancelled
}

enum CheckStatus {
  checkin
  checkout
  absent
}

enum ScanMethod {
  phone
  biometric
}
